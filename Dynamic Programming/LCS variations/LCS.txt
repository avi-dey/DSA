// leetcode 1143. Longest Common Subsequence
// https://leetcode.com/problems/longest-common-subsequence/description/

// tabulation solution C++
class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int m = text1.size();
        int n = text2.size();

        //table
        int t[m+1][n+1];

        //initialisation
        for(int i = 0; i< n+1; i++) t[0][i] = 0;
        for(int i = 0; i < m+1; i++) t[i][0] = 0;

        //choice diag
        for(int i=1; i<m+1; i++){
            for(int j =1; j<n+1; j++){
                if(text1[i-1]==text2[j-1]){
                    t[i][j] = 1+ t[i-1][j-1];
                }
                else{
                    t[i][j] = max(t[i-1][j], t[i][j-1]);
                }
            }
        }

        return t[m][n];
    }
};



// memo solution Java
class Solution {
    public int solve(String s1, String s2, int m, int n, int[][] memo) {
        //base case
        if(m == 0 || n == 0) {
            return 0;
        }
        
        //memo
        if(memo[m][n] != -1) return memo[m][n];

        //decision tree
        if(s1.charAt(m-1) == s2.charAt(n-1)) {
            memo[m][n] = 1 + solve(s1, s2, m-1, n-1, memo);
        }
        else {
            memo[m][n] = Math.max(solve(s1, s2, m-1, n, memo),
                                    solve(s1, s2, m, n-1, memo));
        }
        
        return memo[m][n];
    }

    public int longestCommonSubsequence(String s1, String s2) {
        int m = s1.length();
        int n = s2.length();

        //2d memo
        int[][] memo = new int[m+1][n+1];
        for(int i = 0; i < m+1; i++) {
            Arrays.fill(memo[i], -1);
        }

        return solve(s1, s2, m, n, memo);
    }
}