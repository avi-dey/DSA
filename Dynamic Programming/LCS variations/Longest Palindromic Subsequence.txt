// 516. Longest Palindromic Subsequence
// https://leetcode.com/problems/longest-palindromic-subsequence/


// Tabulation of LCS solution - Java
class Solution {
    private int LCS(String s1, String s2) {
        int m = s1.length();
        int n = s2.length();

        int[][] t = new int[m+1][n+1];
        // in Java by default all elements in zeroes in an array or 2d array.
        //initialisation
        // for(int i = 0; i < m+1; i++) {
        //     t[i][0] = 0; 
        // }
        // for(int i = 0; i < n+1; i++) {
        //     t[0][i] = 0;
        // }

        for(int i = 1; i < m+1; i++) {
            for(int j = 1; j < n+1; j++) {
                if(s1.charAt(i-1) == s2.charAt(j-1)) {
                    t[i][j] = 1 + t[i-1][j-1];
                }
                else {
                    t[i][j] = Math.max(t[i][j-1], t[i-1][j]);
                }
            }
        }
        return t[m][n];
    }

    // since, string are immutable in Java, therefore no reverse() is available by default for String object
    // However, for StringBuilder and StringBuffer, reverse exists in Java
    private String reverse(String s) {
        StringBuilder sb = new StringBuilder(s);
        // for(int i = s.length() - 1; i >= 0; i--) {
        //     sb.append(s.charAt(i));
        // }
        sb.reverse();
        return sb.toString();
    }

    public int longestPalindromeSubseq(String s) {
        //LPS(s) = LCS(a, reverse(a));
        String revS = reverse(s);

        return LCS(s, revS);
    }
}


// Tabulation of LCS solution - C++
class Solution {
public:
    int lcs(string a, string b){
        int m = a.size();
        int n = b.size();

        //table 
        int t[m+1][n+1];
        
        //initialisation
        for(int i = 0; i < m+1; i++) t[i][0] = 0;
        for(int i = 0; i < n+1; i++) t[0][i] = 0;

        //choice diagram
        for(int i =1; i < m+1; i++){
            for(int j = 1; j < n+1; j++){
                //equal
                if(a[i-1] == b[j-1]) t[i][j] = 1+ t[i-1][j-1];
                else t[i][j] = max(t[i-1][j], t[i][j-1]);
            }
        }
        return t[m][n];
    }
    
    int longestPalindromeSubseq(string s) {
        // lps(s) = lcs(s, reverse(s))
        string rev = string(s.rbegin(), s.rend()); // using string cosntructor
        return lcs(s, rev);
    }
};
