https://leetcode.com/problems/edit-distance/description/

// tabulation solution
class Solution {
    public int minDistance(String s1, String s2) {
        //tabulation
        int m = s1.length();
        int n = s2.length();

        int[][] t = new int[m+1][n+1];
        //init 
        for(int i = 0; i < m+1; i++) {
            t[i][0] = i;
        }
        for(int i = 0; i < n+1; i++) {
            t[0][i] = i;
        }

        //decsion tree
        for(int i = 1; i < m+1; i++) {
            for(int j = 1; j < n+1; j++) {
                if(s1.charAt(i-1) == s2.charAt(j-1)) {
                    t[i][j] = t[i-1][j-1];
                }
                else{
                    t[i][j] = 1 + Math.min(t[i-1][j-1],
                                        Math.min(t[i][j-1], t[i-1][j])); 
                }
            }
        }
        return t[m][n];
    }
}


//memo solution
class Solution {
    String s1;
    String s2;
    int[][] table;
    public int minDistance(String s1, String s2) {
        this.s1 = s1;
        this.s2 = s2;
        int m = s1.length();
        int n = s2.length();
        this.table = new int[m+1][n+1];
        return solve(m, n);
    }
    public int solve(int m, int n) {
        if(m == 0) return n; // "" to "asdfasf": is length of asdfasf
        if(n == 0) return m; // "labana" to "": is length of "labana"

        if(table[m][n] != 0) return table[m][n];

        if(s1.charAt(m-1) == s2.charAt(n-1)) {
            table[m][n] = solve(m-1, n-1);  
        }
        else {
            table[m][n] = 1 + Math.min(solve(m-1, n-1),
                                    Math.min(solve(m, n-1), solve(m-1, n)));
        }

        return table[m][n];
    }
}