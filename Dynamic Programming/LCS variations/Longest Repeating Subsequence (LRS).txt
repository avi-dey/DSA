// gfg 
// https://www.geeksforgeeks.org/problems/longest-repeating-subsequence2004/1

// Tabulation solution - C++
class Solution {
	public:
		int LongestRepeatingSubsequence(string str){
		    int n = str.size();
		    
		    //table
		    int t[n+1][n+1];
		    
		    //initialisation
		    for(int i =0; i < n+1; i++){
		         t[i][0] =0; //left-most col
		         t[0][i] =0; //top row
		    }
		    
		    //choice diagram
		    for(int i = 1; i< n+1; i++){
		        for(int j =1; j < n+1; j++){
		            //equal [ONLY CHANGE TO ENTIRE LCS CODE TO MAKE IT LRS]
		            if(str[i-1] == str[j-1] && i != j){
		                t[i][j] = 1+ t[i-1][j-1];
		            }
		            else{
		                t[i][j] = max(t[i-1][j], t[i][j-1]);
		            }
		        }
		    }
		    return t[n][n];
		}

};

// 'SPACE OPTIMIZED TABULATION' - C++
class Solution {
	public:
	// optimized space tabulation (1d array)
		int LongestRepeatingSubsequence(string str){
		    int n = str.size();
		    
		    // tabulation & initialisation (+1 for safety)
		    int curr[n+1] = {0};
		    int prev[n+1] = {0};
            // prev[0] = 0; //garbage value error
		    
		    //choice diagram
		    for(int i = 1; i< n+1; i++){
		        for(int j =1; j < n+1; j++){
		            if(str[i-1] == str[j-1] && i != j){
		                curr[j] = 1 + prev[j-1]; // 1+ topleft
		            }
		            else{
		                // max(top, left)
		                curr[j] = max(prev[j], curr[j-1]);
		            }
		        }
		        // copy prev to curr
		        memcpy(prev, curr, sizeof(prev));
		    }
		    return curr[n];
		}

};
