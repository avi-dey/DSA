// gfg
// https://www.geeksforgeeks.org/problems/lcs-of-three-strings0028/1


// Memo solution - Java (solved by completely me)
class Solution 
{ 
    private String A;
    private String B;
    private String C;
    private int[][][] dp;
    
    int solve(int n1, int n2, int n3) {
        if(n1 == 0 || n2 == 0 || n3 == 0) return 0;
        
        //dp check
        if(dp[n1][n2][n3] != -1) return dp[n1][n2][n3];
        
        
        //decision tree
        //last chars matching
        if((A.charAt(n1-1) == B.charAt(n2-1)) && (B.charAt(n2-1) == C.charAt(n3-1))) {
            dp[n1][n2][n3] = 1 + solve(n1-1, n2-1, n3-1);
        }
        else{ //not matching
            dp[n1][n2][n3] = Math.max(solve(n1-1, n2, n3),
                            Math.max(solve(n1, n2-1, n3), solve(n1, n2, n3-1)));
        }
        return dp[n1][n2][n3];
    }
    
    
    int LCSof3(String A, String B, String C, int n1, int n2, int n3) 
    { 
        this.A = A;
        this.B = B;
        this.C = C;
        
        //3d dimensional table
        dp = new int[n1+1][n2+1][n3+1]; //+1 for safety
        for(int i = 0; i <= n1; i++) {
            for(int j = 0; j <= n2; j++) {
                for(int k = 0; k <= n3; k++) {
                    Arrays.fill(dp[i][j], -1);
                }
            }
        }
        
        return solve(n1, n2, n3);
        
    }
}